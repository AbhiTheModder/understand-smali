# Description: This file contains the grammar for the smalig language. In other words Dalvik Bytecode Opcodes.
# Some info to take note of before reading:
# - opcode: The hexadecimal representation of the opcode.
# - name: The name of the opcode.
# - format: The format of the opcode. For more read: https://source.android.com/docs/core/runtime/instruction-formats
# - format_id: The format id of the opcode.
# - syntax: The Usual syntax of the opcode.
# - args_info: The information about the arguments of the opcode.
# - short_desc: A short description of the opcode.
# - long_desc: A long description of the opcode.
# - note: Any additional notes about the opcode.
# - example: An example of the opcode.
# - example_desc: A description of the example.
# Register informations:
# - vA: It is always a destination register on this document and a single <A> represents a 4-bit register, i.e, first 16 registers (0-15).
# As such vAA represents an 8-bit register, i.e, first 256 registers (0-255), and vAAAA represents a 16-bit register, i.e, first 64k registers (0-65535).
# - vB: It is always a source register on this document and denotion of <B> is same as <A>.
# Arguments which indicate a literal value have the form "#+X".
# Arguments which indicate a relative instruction address offset have the form "+X".
# Arguments which indicate a literal constant pool index have the form "kind@X", where "kind" indicates which constant pool is being referred to.

- opcode: "00"
  name: "nop"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "nop"
  args_info: ""
  short_desc: "No operation"
  long_desc: "Does nothing, Waste cycles."
  note: 'Data-bearing pseudo-instructions are tagged with this opcode, in which case the high-order byte of the opcode unit indicates the nature of the data. See "packed-switch-payload Format", "sparse-switch-payload Format", and "fill-array-data-payload Format".'
  example: "0000 - nop"
  example_desc: "Does nothing, Waste cycles"

- opcode: "01"
  name: "move"
  format: "B|A|op"
  format_id: "12x"
  syntax: "move vA, vB"
  args_info: "A: destination register (4 bits), B: source register (4 bits)"
  short_desc: "Move the contents of one non-object register to another."
  long_desc: "Moves the content of vB into vA. Both registers is in the first 16 register range (0-15)."
  note: ""
  example: "0110 - move v0, v1"
  example_desc: "Moves the content of v1 into v0."

- opcode: "02"
  name: "move/from16"
  format: "AA|op BBBB"
  format_id: "22x"
  syntax: "move/from16 vAA, vBBBB"
  args_info: "A: destination register (8 bits), B: source register (16 bits)"
  short_desc: "Move the contents of one non-object register to another."
  long_desc: "Moves the content of vB into vA. vB is in the 64k register range (0-65535) while vA is one of the first 256 registers (0-255)."
  note: ""
  example: "0200 1900 - move/from16 v0, v25"
  example_desc: "Moves the content of v25 into v0."

- opcode: "03"
  name: "move/16"
  format: "ØØ|op AAAA BBBB"
  format_id: "32x"
  syntax: "move/16 vAAAA, vBBBB"
  args_info: "A: destination register (16 bits), B: source register (16 bits)"
  short_desc: "Move the contents of one non-object register to another."
  long_desc: "Moves the content of vB into vA. Both registers is in the first 64k register range (0-65535) & 16 bits."
  note: ""
  example: "030000090181 - move/16 v2304, v33025"
  example_desc: "Moves the content of v33025 into v2304."

- opcode: "04"
  name: "move-wide"
  format: "B|A|op"
  format_id: "12x"
  syntax: "move-wide vA, vB"
  args_info: "A: destination register-pair (4 bits), B: source register-pair (4 bits)"
  short_desc: "Move the contents of one register-pair to another."
  long_desc: "Move the value of the (vB, vB+1) register-pair to the (vA, vA+1) register-pair. Both register-pairs is in the first 16 register range (0-15)."
  note: "It is legal to move from vN to either vN-1 or vN+1, so implementations must arrange for both halves of a register-pair to be read before anything is written."
  example: ""
  example_desc: ""

- opcode: "05"
  name: "move-wide/from16"
  format: "AA|op BBBB"
  format_id: "22x"
  syntax: "move-wide/from16 vAA, vBBBB"
  args_info: "A: destination register-pair (8 bits), B: source register-pair (16 bits)"
  short_desc: "Move the contents of one register-pair to another."
  long_desc: "Move the value (long/double) of the (vBBBB, vBBBB+1) register-pair to the (vAA, vAA+1) register-pair. vB is in the 64k register range (0-65535) while vA is one of the first 256 registers (0-255)."
  note: "It is legal to move from vN to either vN-1 or vN+1, so implementations must arrange for both halves of a register-pair to be read before anything is written."
  example: "0516 0000 - move-wide/from16 v22, v0"
  example_desc: "Moves the content of register-pair (v0, v0+1) into (v22, v22+1)."

- opcode: "06"
  name: "move-wide/16"
  format: "ØØ|op AAAA BBBB"
  format_id: "32x"
  syntax: "move-wide/from16 vAAAA, vBBBB"
  args_info: "A: destination register-pair (16 bits), B: source register-pair (16 bits)"
  short_desc: "Move the contents of one register-pair to another."
  long_desc: "Move the value of the (vBBBB, vBBBB+1) register-pair to the (vAAAA, vAAAA+1) register-pair. Both register-pairs is in the first 64k register range (0-65535) & 16 bits."
  note: "It is legal to move from vN to either vN-1 or vN+1, so implementations must arrange for both halves of a register-pair to be read before anything is written."
  example: ""
  example_desc: ""

- opcode: "07"
  name: "move-object"
  format: "B|A|op"
  format_id: "12x"
  syntax: "move-object vA, vB"
  args_info: "A: destination register (4 bits), B: source register (4 bits)"
  short_desc: "Move the contents of one object-bearing register to another."
  long_desc: "Move the value of register vB to register vA. Both registers is in the first 16 register range (0-15)."
  note: ""
  example: "0781 - move-object v1, v8"
  example_desc: "Moves the content of v8 to v1."

- opcode: "08"
  name: "move-object/from16"
  format: "AA|op BBBB"
  format_id: "22x"
  syntax: "move-object/from16 vAA, vBBBB"
  args_info: "A: destination register (8 bits), B: source register (16 bits)"
  short_desc: "Move the contents of one object-bearing register to another."
  long_desc: "Move the value of register vBBBB to register vAA. vB is in the 64k register range (0-65535) while vA is one of the first 256 registers (0-255)."
  note: ""
  example: "0801 1500 - move-object/from16 v1, v21"
  example_desc: "Move the content of v21 to v1."

- opcode: "09"
  name: "move-object/16"
  format: "ØØ|op AAAA BBBB"
  format_id: "32x"
  syntax: "move-object/16 vAAAA, vBBBB"
  args_info: "A: destination register (16 bits), B: source register (16 bits)"
  short_desc: "Move the contents of one object-bearing register to another."
  long_desc: "Move the value of register vBBBB to register vAAAA. Both registers is in the first 64k register range (0-65535) & 16 bits."
  note: ""
  example: ""
  example_desc: ""

- opcode: "0A"
  name: "move-result"
  format: "AA|op"
  format_id: "11x"
  syntax: "move-result vAA"
  args_info: "A: destination register (8 bits)"
  short_desc: "Moves the single-word, non-object result of the preceding invoke-kind to the specified register. Must immediately follow the invoke-kind."
  long_desc: "Moves the single-word result of the immediately preceding method invocation into the destination register (vA). vA is in the first 256-register range (0-255)."
  note: "Must immediately follow an invoke-kind with a valid single-word, non-object result. Anywhere else is invalid."
  example: "0A00 - move-result v0"
  example_desc: "Move the return value of a previous method invocation into v0."

- opcode: "0B"
  name: "move-result-wide"
  format: "AA|op"
  format_id: "11x"
  syntax: "move-result-wide vAA"
  args_info: "A: destination register (8 bits)"
  short_desc: "Moves the wide (double-word) non-object result of the preceding invoke-kind to the specified register-pair."
  long_desc: "Moves the wide (double-word) result of the previous method invocation into register-pair (vAA, vAA+1). vA is in the first 256-register range (0-255)."
  note: "Must immediately follow an invoke-kind with a valid double-word result. Anywhere else is invalid."
  example: "0B02 - move-result-wide v2"
  example_desc: "Move the long/double result value of the previous method invocation into v2,v3."

- opcode: "0C"
  name: "move-result-object"
  format: "AA|op"
  format_id: "11x"
  syntax: "move-result-object vAA"
  args_info: "A: destination register (8 bits)"
  short_desc: "Moves the object result of the preceding invoke-kind to the specified register."
  long_desc: "Moves the object result of the previous method invocation into vAA. vA is in the first 256-register range (0-255)."
  note: "Must immediately follow an invoke-kind or filled-new-array with a valid object result. Anywhere else is invalid."
  example: "0C00 - move-result-object v0"
  example_desc: "Move the object result of the previous method invocation into v0."

- opcode: "0D"
  name: "move-exception"
  format: "AA|op"
  format_id: "11x"
  syntax: "move-exception vAA"
  args_info: "A: destination register (8 bits)"
  short_desc: "Moves the exception object of the most recent exception to the specified register."
  long_desc: "Moves the caught exception into vAA. vA is in the first 256-register range (0-255)."
  note: "This must be the first instruction of any exception handler whose caught exception is not to be ignored, and must only *ever* occur as the first instruction of an exception handler; anywhere else is invalid."
  example: "0D19 - move-exception v25"
  example_desc: "Moves the caught exception into register v25."

- opcode: "0E"
  name: "return-void"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "return-void"
  args_info: ""
  short_desc: "Return from a void method."
  long_desc: "Return without a return value, used in void type methods."
  note: ""
  example: "0E00 - return-void"
  example_desc: "Return of a void method without return value."

- opcode: "0F"
  name: "return"
  format: "AA|op"
  format_id: "11x"
  syntax: "return vAA"
  args_info: "A: return value register (8 bits)"
  short_desc: "Return from a single-width (32-bit) non-object value-returning method."
  long_desc: "Returns the 32-bit value in vAA to the caller. vA is in the first 256-register range (0-255)."
  note: ""
  example: "0F00 - return v0"
  example_desc: "Returns with return value in v0."

- opcode: "10"
  name: "return-wide"
  format: "AA|op"
  format_id: "11x"
  syntax: "return-wide vAA"
  args_info: "A: return value register (8 bits)"
  short_desc: "Return from a double-width (64-bit) value-returning method."
  long_desc: "Returns a double/long result from register-pair (vAA, vAA+1) to the caller. vA is in the first 256-register range (0-255)."
  note: ""
  example: "1000 - return-wide v0"
  example_desc: "Returns with a double/long value in v0,v1."

- opcode: "11"
  name: "return-object"
  format: "AA|op"
  format_id: "11x"
  syntax: "return-object vAA"
  args_info: "A: return value register (8 bits)"
  short_desc: "Return from an object-returning method."
  long_desc: "Returns the object reference value from vAA to the caller. vA is in the first 256-register range (0-255)."
  note: ""
  example: "1100 - return-object v0"
  example_desc: "Returns with object reference value in v0."

- opcode: "12"
  name: "const/4"
  format: "B|A|op"
  format_id: "11n"
  syntax: "const/4 vA, #+B"
  args_info: "A: destination register (4 bits), B: signed int (4 bits)"
  short_disc: "Move the given literal value (sign-extended to 32 bits) into the specified register."
  long_desc: "Moves the literal value B into vA. B is sign-extended to 32 bits. The value of B is in the range -8 to 7 (-0x8 to 0x7)."
  note: ""
  example: "1200 0001 - const/4 v0, 0x1"
  example_desc: "Moves the literal value 0x1(1) into v0."

- opcode: "13"
  name: "const/16"
  format: "AA|op BBBB"
  format_id: "21s"
  syntax: "const/16 vAA, #+BBBB"
  args_info: "A: destination register (8 bits), B: signed int (16 bits)"
  short_desc: "Move the given literal value (sign-extended to 32 bits) into the specified register."
  long_desc: "Moves the literal value BBBB into vAA. BBBB is sign-extended to 32 bits. The value of BBBB is in the range -32768 to 32767 (-0x8000 to 0x7FFF)."
  note: ""
  example: "1300 0A00 - const/16 v0, 0xa"
  example_desc: "Moves the literal value 0xa(10) into v0."

- opcode: "14"
  name: "const"
  format: "AA|op BBBBlo"
  format_id: "31i"
  syntax: "const vAA, #+BBBBBBBB"
  args_info: "A: destination register (8 bits), B: arbitrary constant (32 bits)"
  short_desc: "Move the given literal value into the specified register."
  long_desc: "Moves the literal value BBBB into vAA. BBBB is a 32-bit constant. The value of BBBB is in the range -2147483648 to 2147483647 (-0x80000000 to 0x7FFFFFFF)."
  note: ""
  example: "1400 4E61BC00 - const v0, 0xBC614E"
  example_desc: "Moves the literal value 0xBC614E(12345678) into v0."

- opcode: "15"
  name: "const/high16"
  format: "AA|op BBBB"
  format_id: "21h"
  syntax: "const/high16 vAA, #+BBBB0000"
  args_info: "A: destination register (8 bits), B: signed int (16 bits)"
  short_desc: "Move the given literal value (right-zero-extended to 32 bits) into the specified register."
  long_desc: "Moves the literal value BBBB0000 into vAA. BBBB is right-zero-extended to 32 bits. The value of BBBB is in the range -32768 to 32767 (-0x80000000 to 0x7FFF0000)."
  note: "Generaly used to initialise float values."
  example: "1500 2041 - const/high16 v0, 0x41200000 (#float 10.0)"
  example_desc: "Moves the floating literal value 0x41200000(10.0) into v0. The 16 bit literal in the instruction carries the top 16 bits of the floating point number."

- opcode: "16"
  name: "const-wide/16"
  format: "AA|op BBBB"
  format_id: "21s"
  syntax: "const-wide/16 vAA, #+BBBB"
  args_info: "A: destination register (8 bits), B: signed int (16 bits)"
  short_desc: "Move the given literal value (sign-extended to 64 bits) into the specified register-pair."
  long_desc: "Moves the literal value BBBB into register-pair (vAA, vAA+1), expanding the integer constant into a long constant. BBBB is sign-extended to 64 bits. The value of BBBB is in the range -32768 to 32767 (-0x8000 to 0x7FFF)."
  note: ""
  example: "1600 0A00 - const-wide/16 v0, 0xa (#long 10.0)"
  example_desc: "Moves the long literal value 0xa(10) into (v0,v1) register-pair."

- opcode: "17"
  name: "const-wide/32"
  format: "AA|op BBBBlo"
  format_id: "31i"
  syntax: "const-wide/32 vAA, #+BBBBBBBB"
  args_info: "A: destination register (8 bits), B: signed int (32 bits)"
  short_desc: "Move the given literal value (sign-extended to 64 bits) into the specified register-pair."
  long_desc: "Moves the literal value BBBBBBBB into register-pair (vAA, vAA+1), expanding the integer constant into a long constant. BBBBBBBB is sign-extended to 64 bits. The value of BBBBBBBB is in the range -2147483648 to 2147483647 (-0x80000000 to 0x7FFFFFFF)."
  note: ""
  example: "1702 4E61 BC00 - const-wide/32 v2, 0x00bc614e"
  example_desc: "Moves the long literal value 0x00bc614e into (v2,v3) register-pair."

- opcode: "18"
  name: "const-wide"
  format: "AA|op BBBBlo BBBB BBBB BBBBhi"
  format_id: "51l"
  syntax: "const-wide vAA, #+BBBBBBBBBBBBBBBB"
  args_info: "A: destination register (8 bits), B: signed int (64 bits)"
  short_desc: "Move the given literal value into the specified register-pair."
  long_desc: "Moves the literal value constant BBBBBBBBBBBBBBBB into register-pair (vAA, vAA+1). The value of BBBBBBBBBBBBBBBB is in the range -9223372036854775808 to 9223372036854775807 (-0x8000000000000000 to 0x7FFFFFFFFFFFFFFF)."
  note: ""
  example: "1802 874b 6b5d 54dc 2b00- const-wide v2, 0x002bdc545d6b4b87 (#long 12345678901234567)"
  example_desc: "Moves the long literal value 0x002bdc545d6b4b87 into (v2,v3) register-pair."

- opcode: "19"
  name: "const-wide/high16"
  format: "AA|op BBBB"
  format_id: "21h"
  syntax: "const-wide/high16 vAA, #+BBBB000000000000"
  args_info: "A: destination register (8 bits), B: signed int (16 bits)"
  short_desc: "Move the given literal value (right-zero-extended to 64 bits) into the specified register-pair."
  long_desc: "Moves the literal value BBBB into register-pair (vAA, vAA+1). BBBB is right-zero-extended to 64 bits. The value of BBBB is in the range -32768 to 32767 (-0x8000 to 0x7FFF)."
  note: "Generaly used to initialise double values."
  example: "1900 2440 - const-wide/high16 v0, 0x402400000 (#double 10.0)"
  example_desc: "Moves the double literal value 10.0 into (v0,v1) register-pair."

- opcode: "1A"
  name: "const-string"
  format: "AA|op BBBB"
  format_id: "21c"
  syntax: "const-string vAA, string@BBBB"
  args_info: "A: destination register (8 bits), B: string index"
  short_desc: "Move a reference to the string specified by the given index into the specified register."
  long_desc: "Moves the string from the string pool at the given index into the specified register."
  note: "The string pool is a table of strings that is stored in the DEX file. The strings are referenced by their index in the pool."
  example: "1A00 0000 - const-string v0, '' #string@0x0000"
  example_desc: "Moves the string at index 0x0000 (entry #0) in the string pool into register v0."

- opcode: "1B"
  name: "const-string/jumbo"
  format: "AA|op BBBBlo BBBBhi"
  format_id: "31c"
  syntax: "const-string/jumbo vAA, string@BBBBBBBB"
  args_info: "A: destination register (8 bits), B: string index"
  short_desc: "Move a reference to the string specified by the given index into the specified register."
  long_desc: "Moves the string from the string pool at the given index into the specified register. This instruction is used when the string index is too large to fit in 16 bits."
  note: "The string pool is a table of strings that is stored in the DEX file. The strings are referenced by their index in the pool."
  example: "1B00 0000 0001 - const-string/jumbo v0, '' #string@0x0001"
  example_desc: "Moves the string at index 0x0001 (entry #1) in the string pool into register v0."

- opcode: "1C"
  name: "const-class"
  format: "AA|op BBBB"
  format_id: "21c"
  syntax: "const-class vAA, type@BBBB"
  args_info: "A: destination register (8 bits), B: type index"
  short_desc: "Move a reference to the class specified by the given index into the specified register."
  long_desc: "Moves the type (e.g. Object.class) from the type pool at the given index into the specified register. The type pool is a table of types that is stored in the DEX file. The types are referenced by their index in the pool."
  note: "In the case where the indicated type is primitive, this will store a reference to the primitive type's degenerate class."
  example: "1C00 0100 - const-class v0, Test3 // type@0001"
  example_desc: "Moves the type refrence (Test3.class) at index 0x0001 (entry #1) in the type pool into register v0."

- opcode: "1D"
  name: "monitor-enter"
  format: "AA|op"
  format_id: "11x"
  syntax: "monitor-enter vAA"
  args_info: "A: reference-bearing register (8 bits)"
  short_desc: "Acquire the monitor for the indicated object."
  long_desc: "Obtains the monitor of the object referenced by vAA."
  note: ""
  example: "1D00 - monitor-enter v0"
  example_desc: "Obtains the monitor of the object referenced by v0."

- opcode: "1E"
  name: "monitor-exit"
  format: "AA|op"
  format_id: "11x"
  syntax: "monitor-exit vAA"
  args_info: "A: reference-bearing register (8 bits)"
  short_desc: "Release the monitor for the indicated object."
  long_desc: "Releases the monitor of the object referenced by vAA."
  note: "If this instruction needs to throw an exception, it must do so as if the pc has already advanced past the instruction. It may be useful to think of this as the instruction successfully executing (in a sense), and the exception getting thrown _after_ the instruction but _before_ the next one gets a chance to run. This definition makes it possible for a method to use a monitor cleanup catch-all (e.g., *finally*) block as the monitor cleanup for that block itself, as a way to handle the arbitrary exceptions that might get thrown due to the historical implementation of *Thread.stop()*, while still managing to have proper monitor hygiene."
  example: "1E00 - monitor-exit v0"
  example_desc: "Releases the monitor of the object referenced by v0."

- opcode: "1F"
  name: "check-cast"
  format: "AA|op BBBB"
  format_id: "21c"
  syntax: "check-cast vAA, type@BBBB"
  args_info: "A: reference-bearing register (8 bits), B: type index (16 bits)"
  short_desc: "Throw a ClassCastException if the reference in the given register cannot be cast to the indicated type."
  long_desc: "Check that the object referenced by vAA is an instance of the class resolved by type@BBBB. If it is not, throw a ClassCastException."
  note: "Since 'A' must always be a reference (and not a primitive value), this will necessarily fail at runtime (that is, it will throw an exception) if 'B' refers to a primitive type."
  example: "1F04 0100 - check-cast v4, Test3 #type@0001"
  example_desc: "Checks whether the object reference in v4 can be cast to type@0001 (entry #1 in the type id table) and throws a ClassCastException if it cannot."

- opcode: "20"
  name: "instance-of"
  format: "B|A|op CCCC"
  format_id: "22c"
  syntax: "instance-of vA, vB, type@CCCC"
  args_info: "A: destination register (4 bits), B: reference-bearing register (4 bits), C: type index (16 bits)"
  short_desc: "Store in the given destination register 1 if the indicated reference is an instance of the given type, or 0 if not."
  long_desc: "Check whether the object referenced by vB is an instance of the class resolved by type@CCCC. If it is, the value 1 is stored in vA; otherwise, the value 0 is stored in vA."
  note: "Since 'B' must always be a reference (and not a primitive value), this will always result in 0 being stored if C refers to a primitive type. In short, This will always result in 0 if the type is primitive."
  example: "2040 0100 - instance-of v0, v4, type@0001"
  example_desc: "Checks whether the object reference in v4 is an instance of type@0001 (entry #1 in the type id table) and stores the result in v0."

- opcode: "21"
  name: "array-length"
  format: "B|A|op"
  format_id: "12x"
  syntax: "array-length vA, vB"
  args_info: "A: destination register (4 bits), B: array reference-bearing register (4 bits)"
  short_desc: "Store the length of the indicated array."
  long_desc: "Stores the length of the array referenced by vB into vA."
  note: "The array must be a valid array object."
  example: ""
  example_desc: ""

- opcode: "22"
  name: "new-instance"
  format: "AA|op BBBB"
  format_id: "21c"
  syntax: "new-instance vAA, type@BBBB"
  args_info: "A: destination register (8 bits), B: type index (16 bits)"
  short_desc: "Construct a new instance of the indicated type."
  long_desc: "Creates a new instance of the type specified by type@BBBB and stores a reference to it in vAA."
  note: " The type must refer to a non-array class."
  example: ""
  example_desc: ""

- opcode: "23"
  name: "new-array"
  format: "B|A|op CCCC"
  format_id: "22c"
  syntax: "new-array vA, vB, type@CCCC"
  args_info: "A: destination register (4 bits), B: size register (4 bits), C: type index (16 bits)"
  short_desc: "Construct a new array of the indicated type and size."
  long_desc: "Creates a new array of the type specified by type@CCCC with the size specified by vB. The reference to the new array is stored in vA."
  note: "The type must be an array type."
  example: ""
  example_desc: ""

- opcode: "24"
  name: "filled-new-array"
  format: "A|G|op BBBB F|E|D|C"
  format_id: "35c"
  syntax: "filled-new-array {vC, vD, vE, vF, vG}, type@BBBB"
  args_info: "A: array size and argument word count (4 bits), B: type index (16 bits), C..G: argument registers (4 bits each)"
  short_desc: "Construct an array of the given type and size, filling it with the supplied contents."
  long_desc: "Creates a new array of the type specified by type@BBBB and fills it with the values from the specified registers. The constructed instance is stored as a result and must be moved to a register with an immediately subsequent `move-result-object` instruction."
  note: "The type must be an array type, and the array's contents must be single-word (no arrays of long or double, but reference types are acceptable)."
  example: ""
  example_desc: ""

- opcode: "25"
  name: "filled-new-array/range"
  format: "AA|op BBBB CCCC"
  format_id: "3rc"
  syntax: "filled-new-array/range {vCCCC .. vNNNN}, type@BBBB"
  args_info: "A: array size and argument word count (8 bits), B: type index (16 bits), C: first argument register (16 bits), N = A + C - 1"
  short_desc: "Construct an array of the given type and size, filling it with the supplied contents."
  long_desc: "Creates a new array of the type specified by type@BBBB and fills it with the values from the specified range of registers. The constructed instance is stored as a result and must be moved to a register with an immediately subsequent `move-result-object` instruction."
  note: "The type must be an array type, and the array's contents must be single-word (no arrays of long or double, but reference types are acceptable)."
  example: ""
  example_desc: ""

- opcode: "26"
  name: "fill-array-data"
  format: "AA|op BBBB"
  format_id: "31t"
  syntax: "fill-array-data vAA, +BBBBBBBB"
  args_info: "A: array reference (8 bits), B: signed branch offset to table data pseudo-instruction (32 bits)"
  short_desc: "Fill the given array with the indicated data."
  long_desc: "Fills the array referenced by vAA with the data specified by the table data pseudo-instruction at the offset +BBBBBBBB."
  note: "The array must be an array of primitives, and the data table must match the array's type and size."
  example: ""
  example_desc: ""

- opcode: "27"
  name: "throw"
  format: "AA|op"
  format_id: "11x"
  syntax: "throw vAA"
  args_info: "A: exception-bearing register (8 bits)"
  short_desc: "Throw the indicated exception."
  long_desc: "Throws the exception object referenced by vAA. This instruction must be followed by an appropriate exception handler."
  note: ""
  example: ""
  example_desc: ""

- opcode: "28"
  name: "goto"
  format: "AA|op"
  format_id: "10t"
  syntax: "goto +AA"
  args_info: "target: signed branch offset (8 bits)"
  short_desc: "Unconditionally jump to the indicated instruction."
  long_desc: "Jumps to the instruction at the offset specified by +AA."
  note: "The branch offset must not be 0. (A spin loop may be legally constructed either with goto/32 or by including a nop as a target before the branch.)"
  example: "28E9 - goto 0x000150EA"
  example_desc: "Jumps to the instruction at address 0x000150EA."

- opcode: "29"
  name: "goto/16"
  format: "AA|op BBBB"
  format_id: "20t"
  syntax: "goto/16 +AAAA"
  args_info: "A: signed branch offset (16 bits)"
  short_desc: "Unconditionally jump to the indicated instruction."
  long_desc: "Jumps to the instruction at the offset specified by +AAAA. The branch offset must not be 0."
  note: ""
  example: ""
  example_desc: ""

- opcode: "2A"
  name: "goto/32"
  format: "ØØ|op AAAA BBBB"
  format_id: "30t"
  syntax: "goto/32 +AAAAAAAA"
  args_info: "A: signed branch offset (32 bits)"
  short_desc: "Unconditionally jump to the indicated instruction."
  long_desc: "Jumps to the instruction at the offset specified by +AAAAAAAA. The branch offset must not be 0."
  note: ""
  example: ""
  example_desc: ""

- opcode: "2B"
  name: "packed-switch"
  format: "AA|op BBBB"
  format_id: "31t"
  syntax: "packed-switch vAA, +BBBBBBBB"
  args_info: "A: register to test (8 bits), B: signed branch offset to table data pseudo-instruction (32 bits)"
  short_desc: "Jump based on the value in the given register using a table of offsets."
  long_desc: "Jumps to a new instruction based on the value in vAA, using a table of offsets corresponding to each value in a particular integral range. If there is no match, execution continues with the next instruction."
  note: ""
  example: ""
  example_desc: ""

- opcode: "2C"
  name: "sparse-switch"
  format: "AA|op BBBB"
  format_id: "31t"
  syntax: "sparse-switch vAA, +BBBBBBBB"
  args_info: "A: register to test (8 bits), B: signed branch offset to table data pseudo-instruction (32 bits)"
  short_desc: "Jump based on the value in the given register using an ordered table of value-offset pairs."
  long_desc: "Jumps to a new instruction based on the value in vAA, using an ordered table of value-offset pairs. If there is no match, execution continues with the next instruction."
  note: ""
  example: ""
  example_desc: ""

- opcode: "2D"
  name: "cmpl-float"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "cmpl-float vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: first source register (8 bits), C: second source register (8 bits)"
  short_desc: "Compare two float values with less-than bias."
  long_desc: "Compares the float values in vBB and vCC. If vBB == vCC, 0 is stored in vAA. If vBB > vCC, 1 is stored. If vBB < vCC or either value is NaN, -1 is stored."
  note: "This instruction has a less-than bias for NaN comparisons."
  example: ""
  example_desc: ""

- opcode: "2E"
  name: "cmpg-float"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "cmpg-float vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: first source register (8 bits), C: second source register (8 bits)"
  short_desc: "Compare two float values with greater-than bias."
  long_desc: "Compares the float values in vBB and vCC. If vBB == vCC, 0 is stored in vAA. If vBB > vCC or either value is NaN, 1 is stored. If vBB < vCC, -1 is stored."
  note: "This instruction has a greater-than bias for NaN comparisons."
  example: ""
  example_desc: ""

- opcode: "2F"
  name: "cmpl-double"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "cmpl-double vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: first source register pair (8 bits), C: second source register pair (8 bits)"
  short_desc: "Compare two double values with less-than bias."
  long_desc: "Compares the double values in vBB,vBB+1 and vCC,vCC+1. If vBB == vCC, 0 is stored in vAA. If vBB > vCC, 1 is stored. If vBB < vCC or either value is NaN, -1 is stored."
  note: "This instruction has a less-than bias for NaN comparisons."
  example: ""
  example_desc: ""

- opcode: "30"
  name: "cmpg-double"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "cmpg-double vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: first source register pair (8 bits), C: second source register pair (8 bits)"
  short_desc: "Compare two double values with greater-than bias."
  long_desc: "Compares the double values in vBB,vBB+1 and vCC,vCC+1. If vBB == vCC, 0 is stored in vAA. If vBB > vCC or either value is NaN, 1 is stored. If vBB < vCC, -1 is stored."
  note: "This instruction has a greater-than bias for NaN comparisons."
  example: ""
  example_desc: ""

- opcode: "31"
  name: "cmp-long"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "cmp-long vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: first source register pair (8 bits), C: second source register pair (8 bits)"
  short_desc: "Compare two long values."
  long_desc: "Compares the long values in vBB,vBB+1 and vCC,vCC+1. If vBB == vCC, 0 is stored in vAA. If vBB > vCC, 1 is stored. If vBB < vCC, -1 is stored."
  note: ""
  example: ""
  example_desc: ""

- opcode: "32"
  name: "if-eq"
  format: "AA|op BB CC"
  format_id: "22t"
  syntax: "if-eq vA, vB, +CCCC"
  args_info: "A: first register to test (4 bits), B: second register to test (4 bits), C: signed branch offset (16 bits)"
  short_desc: "Branch if two registers are equal."
  long_desc: "Branches to the instruction at the offset +CCCC if the values in vA and vB are equal. Otherwise, execution continues with the next instruction."
  note: "The branch offset must not be 0."
  example: ""
  example_desc: ""

- opcode: "33"
  name: "if-ne"
  format: "AA|op BB CC"
  format_id: "22t"
  syntax: "if-ne vA, vB, +CCCC"
  args_info: "A: first register to test (4 bits), B: second register to test (4 bits), C: signed branch offset (16 bits)"
  short_desc: "Branch if two registers are not equal."
  long_desc: "Branches to the instruction at the offset +CCCC if the values in vA and vB are not equal. Otherwise, execution continues with the next instruction."
  note: "The branch offset must not be 0."
  example: ""
  example_desc: ""

- opcode: "34"
  name: "if-lt"
  format: "AA|op BB CC"
  format_id: "22t"
  syntax: "if-lt vA, vB, +CCCC"
  args_info: "A: first register to test (4 bits), B: second register to test (4 bits), C: signed branch offset (16 bits)"
  short_desc: "Branch if the first register is less than the second."
  long_desc: "Branches to the instruction at the offset +CCCC if the value in vA is less than the value in vB. Otherwise, execution continues with the next instruction."
  note: "The branch offset must not be 0."
  example: ""
  example_desc: ""

- opcode: "35"
  name: "if-ge"
  format: "AA|op BB CC"
  format_id: "22t"
  syntax: "if-ge vA, vB, +CCCC"
  args_info: "A: first register to test (4 bits), B: second register to test (4 bits), C: signed branch offset (16 bits)"
  short_desc: "Branch if the first register is greater than or equal to the second."
  long_desc: "Branches to the instruction at the offset +CCCC if the value in vA is greater than or equal to the value in vB. Otherwise, execution continues with the next instruction."
  note: "The branch offset must not be 0."
  example: ""
  example_desc: ""

- opcode: "36"
  name: "if-gt"
  format: "AA|op BB CC"
  format_id: "22t"
  syntax: "if-gt vA, vB, +CCCC"
  args_info: "A: first register to test (4 bits), B: second register to test (4 bits), C: signed branch offset (16 bits)"
  short_desc: "Branch if the first register is greater than the second."
  long_desc: "Branches to the instruction at the offset +CCCC if the value in vA is greater than the value in vB. Otherwise, execution continues with the next instruction."
  note: "The branch offset must not be 0."
  example: ""
  example_desc: ""

- opcode: "37"
  name: "if-le"
  format: "AA|op BB CC"
  format_id: "22t"
  syntax: "if-le vA, vB, +CCCC"
  args_info: "A: first register to test (4 bits), B: second register to test (4 bits), C: signed branch offset (16 bits)"
  short_desc: "Branch if the first register is less than or equal to the second."
  long_desc: "Branches to the instruction at the offset +CCCC if the value in vA is less than or equal to the value in vB. Otherwise, execution continues with the next instruction."
  note: "The branch offset must not be 0."
  example: ""
  example_desc: ""

- opcode: "38"
  name: "if-eqz"
  format: "AA|op BB"
  format_id: "21t"
  syntax: "if-eqz vAA, +BBBB"
  args_info: "A: register to test (8 bits), B: signed branch offset (16 bits)"
  short_desc: "Branch if the register is equal to zero."
  long_desc: "Branches to the instruction at the offset +BBBB if the value in vAA is equal to zero. Otherwise, execution continues with the next instruction."
  note: "The branch offset must not be 0."
  example: ""
  example_desc: ""

- opcode: "39"
  name: "if-nez"
  format: "AA|op BB"
  format_id: "21t"
  syntax: "if-nez vAA, +BBBB"
  args_info: "A: register to test (8 bits), B: signed branch offset (16 bits)"
  short_desc: "Branch if the register is not equal to zero."
  long_desc: "Branches to the instruction at the offset +BBBB if the value in vAA is not equal to zero. Otherwise, execution continues with the next instruction."
  note: "The branch offset must not be 0."
  example: ""
  example_desc: ""

- opcode: "3A"
  name: "if-ltz"
  format: "AA|op BB"
  format_id: "21t"
  syntax: "if-ltz vAA, +BBBB"
  args_info: "A: register to test (8 bits), B: signed branch offset (16 bits)"
  short_desc: "Branch if the register is less than zero."
  long_desc: "Branches to the instruction at the offset +BBBB if the value in vAA is less than zero. Otherwise, execution continues with the next instruction."
  note: "The branch offset must not be 0."
  example: ""
  example_desc: ""

- opcode: "3B"
  name: "if-gez"
  format: "AA|op BB"
  format_id: "21t"
  syntax: "if-gez vAA, +BBBB"
  args_info: "A: register to test (8 bits), B: signed branch offset (16 bits)"
  short_desc: "Branch if the register is greater than or equal to zero."
  long_desc: "Branches to the instruction at the offset +BBBB if the value in vAA is greater than or equal to zero. Otherwise, execution continues with the next instruction."
  note: "The branch offset must not be 0."
  example: ""
  example_desc: ""

- opcode: "3C"
  name: "if-gtz"
  format: "AA|op BB"
  format_id: "21t"
  syntax: "if-gtz vAA, +BBBB"
  args_info: "A: register to test (8 bits), B: signed branch offset (16 bits)"
  short_desc: "Branch if the register is greater than zero."
  long_desc: "Branches to the instruction at the offset +BBBB if the value in vAA is greater than zero. Otherwise, execution continues with the next instruction."
  note: "The branch offset must not be 0."
  example: ""
  example_desc: ""

- opcode: "3D"
  name: "if-lez"
  format: "AA|op BB"
  format_id: "21t"
  syntax: "if-lez vAA, +BBBB"
  args_info: "A: register to test (8 bits), B: signed branch offset (16 bits)"
  short_desc: "Branch if the register is less than or equal to zero."
  long_desc: "Branches to the instruction at the offset +BBBB if the value in vAA is less than or equal to zero. Otherwise, execution continues with the next instruction."
  note: "The branch offset must not be 0."
  example: ""
  example_desc: ""

- opcode: "3E"
  name: "unused_3E"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_3E"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "3F"
  name: "unused_3F"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_3F"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "40"
  name: "unused_40"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_40"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "41"
  name: "unused_41"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_41"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "42"
  name: "unused_42"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_42"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "43"
  name: "unused_43"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_43"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "44"
  name: "aget"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "aget vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: array reference register (8 bits), C: index register (8 bits)"
  short_desc: "Get an integer value from an array."
  long_desc: "Retrieves the integer value from the array referenced by vBB at the index specified by vCC and stores it in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "45"
  name: "aget-wide"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "aget-wide vAA, vBB, vCC"
  args_info: "A: destination register pair (8 bits), B: array reference register (8 bits), C: index register (8 bits)"
  short_desc: "Get a long or double value from an array."
  long_desc: "Retrieves the long or double value from the array referenced by vBB at the index specified by vCC and stores it in vAA,vAA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "46"
  name: "aget-object"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "aget-object vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: array reference register (8 bits), C: index register (8 bits)"
  short_desc: "Get an object reference from an array."
  long_desc: "Retrieves the object reference from the array referenced by vBB at the index specified by vCC and stores it in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "47"
  name: "aget-boolean"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "aget-boolean vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: array reference register (8 bits), C: index register (8 bits)"
  short_desc: "Get a boolean value from an array."
  long_desc: "Retrieves the boolean value from the array referenced by vBB at the index specified by vCC and stores it in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "48"
  name: "aget-byte"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "aget-byte vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: array reference register (8 bits), C: index register (8 bits)"
  short_desc: "Get a byte value from an array."
  long_desc: "Retrieves the byte value from the array referenced by vBB at the index specified by vCC and stores it in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "49"
  name: "aget-char"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "aget-char vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: array reference register (8 bits), C: index register (8 bits)"
  short_desc: "Get a char value from an array."
  long_desc: "Retrieves the char value from the array referenced by vBB at the index specified by vCC and stores it in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "4A"
  name: "aget-short"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "aget-short vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: array reference register (8 bits), C: index register (8 bits)"
  short_desc: "Get a short value from an array."
  long_desc: "Retrieves the short value from the array referenced by vBB at the index specified by vCC and stores it in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "4B"
  name: "aput"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "aput vAA, vBB, vCC"
  args_info: "A: source register (8 bits), B: array reference register (8 bits), C: index register (8 bits)"
  short_desc: "Store an integer value into an array."
  long_desc: "Stores the integer value from vAA into the array referenced by vBB at the index specified by vCC."
  note: ""
  example: ""
  example_desc: ""

- opcode: "4C"
  name: "aput-wide"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "aput-wide vAA, vBB, vCC"
  args_info: "A: source register pair (8 bits), B: array reference register (8 bits), C: index register (8 bits)"
  short_desc: "Store a long or double value into an array."
  long_desc: "Stores the long or double value from vAA,vAA+1 into the array referenced by vBB at the index specified by vCC."
  note: ""
  example: ""
  example_desc: ""

- opcode: "4D"
  name: "aput-object"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "aput-object vAA, vBB, vCC"
  args_info: "A: source register (8 bits), B: array reference register (8 bits), C: index register (8 bits)"
  short_desc: "Store an object reference into an array."
  long_desc: "Stores the object reference from vAA into the array referenced by vBB at the index specified by vCC."
  note: ""
  example: ""
  example_desc: ""

- opcode: "4E"
  name: "aput-boolean"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "aput-boolean vAA, vBB, vCC"
  args_info: "A: source register (8 bits), B: array reference register (8 bits), C: index register (8 bits)"
  short_desc: "Store a boolean value into an array."
  long_desc: "Stores the boolean value from vAA into the array referenced by vBB at the index specified by vCC."
  note: ""
  example: ""
  example_desc: ""

- opcode: "4F"
  name: "aput-byte"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "aput-byte vAA, vBB, vCC"
  args_info: "A: source register (8 bits), B: array reference register (8 bits), C: index register (8 bits)"
  short_desc: "Store a byte value into an array."
  long_desc: "Stores the byte value from vAA into the array referenced by vBB at the index specified by vCC."
  note: ""
  example: ""
  example_desc: ""

- opcode: "50"
  name: "aput-char"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "aput-char vAA, vBB, vCC"
  args_info: "A: source register (8 bits), B: array reference register (8 bits), C: index register (8 bits)"
  short_desc: "Store a char value into an array."
  long_desc: "Stores the char value from vAA into the array referenced by vBB at the index specified by vCC."
  note: ""
  example: ""
  example_desc: ""

- opcode: "51"
  name: "aput-short"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "aput-short vAA, vBB, vCC"
  args_info: "A: source register (8 bits), B: array reference register (8 bits), C: index register (8 bits)"
  short_desc: "Store a short value into an array."
  long_desc: "Stores the short value from vAA into the array referenced by vBB at the index specified by vCC."
  note: ""
  example: ""
  example_desc: ""

- opcode: "52"
  name: "iget"
  format: "B|A|op CCCC"
  format_id: "22c"
  syntax: "iget vA, vB, field@CCCC"
  args_info: "A: destination register (4 bits), B: object reference register (4 bits), C: field index (16 bits)"
  short_desc: "Get an instance field value."
  long_desc: "Retrieves the value of the instance field specified by field@CCCC from the object referenced by vB and stores it in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "53"
  name: "iget-wide"
  format: "B|A|op CCCC"
  format_id: "22c"
  syntax: "iget-wide vA, vB, field@CCCC"
  args_info: "A: destination register pair (4 bits), B: object reference register (4 bits), C: field index (16 bits)"
  short_desc: "Get a long or double instance field value."
  long_desc: "Retrieves the long or double value of the instance field specified by field@CCCC from the object referenced by vB and stores it in vA,vA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "54"
  name: "iget-object"
  format: "B|A|op CCCC"
  format_id: "22c"
  syntax: "iget-object vA, vB, field@CCCC"
  args_info: "A: destination register (4 bits), B: object reference register (4 bits), C: field index (16 bits)"
  short_desc: "Get an object reference instance field value."
  long_desc: "Retrieves the object reference of the instance field specified by field@CCCC from the object referenced by vB and stores it in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "55"
  name: "iget-boolean"
  format: "B|A|op CCCC"
  format_id: "22c"
  syntax: "iget-boolean vA, vB, field@CCCC"
  args_info: "A: destination register (4 bits), B: object reference register (4 bits), C: field index (16 bits)"
  short_desc: "Get a boolean instance field value."
  long_desc: "Retrieves the boolean value of the instance field specified by field@CCCC from the object referenced by vB and stores it in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "56"
  name: "iget-byte"
  format: "B|A|op CCCC"
  format_id: "22c"
  syntax: "iget-byte vA, vB, field@CCCC"
  args_info: "A: destination register (4 bits), B: object reference register (4 bits), C: field index (16 bits)"
  short_desc: "Get a byte instance field value."
  long_desc: "Retrieves the byte value of the instance field specified by field@CCCC from the object referenced by vB and stores it in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "57"
  name: "iget-char"
  format: "B|A|op CCCC"
  format_id: "22c"
  syntax: "iget-char vA, vB, field@CCCC"
  args_info: "A: destination register (4 bits), B: object reference register (4 bits), C: field index (16 bits)"
  short_desc: "Get a char instance field value."
  long_desc: "Retrieves the char value of the instance field specified by field@CCCC from the object referenced by vB and stores it in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "58"
  name: "iget-short"
  format: "B|A|op CCCC"
  format_id: "22c"
  syntax: "iget-short vA, vB, field@CCCC"
  args_info: "A: destination register (4 bits), B: object reference register (4 bits), C: field index (16 bits)"
  short_desc: "Get a short instance field value."
  long_desc: "Retrieves the short value of the instance field specified by field@CCCC from the object referenced by vB and stores it in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "59"
  name: "iput"
  format: "B|A|op CCCC"
  format_id: "22c"
  syntax: "iput vA, vB, field@CCCC"
  args_info: "A: source register (4 bits), B: object reference register (4 bits), C: field index (16 bits)"
  short_desc: "Store a value into an instance field."
  long_desc: "Stores the value from vA into the instance field specified by field@CCCC of the object referenced by vB."
  note: ""
  example: ""
  example_desc: ""

- opcode: "5A"
  name: "iput-wide"
  format: "B|A|op CCCC"
  format_id: "22c"
  syntax: "iput-wide vA, vB, field@CCCC"
  args_info: "A: source register pair (4 bits), B: object reference register (4 bits), C: field index (16 bits)"
  short_desc: "Store a long or double value into an instance field."
  long_desc: "Stores the long or double value from vA,vA+1 into the instance field specified by field@CCCC of the object referenced by vB."
  note: ""
  example: ""
  example_desc: ""

- opcode: "5B"
  name: "iput-object"
  format: "B|A|op CCCC"
  format_id: "22c"
  syntax: "iput-object vA, vB, field@CCCC"
  args_info: "A: source register (4 bits), B: object reference register (4 bits), C: field index (16 bits)"
  short_desc: "Store an object reference into an instance field."
  long_desc: "Stores the object reference from vA into the instance field specified by field@CCCC of the object referenced by vB."
  note: ""
  example: ""
  example_desc: ""

- opcode: "5C"
  name: "iput-boolean"
  format: "B|A|op CCCC"
  format_id: "22c"
  syntax: "iput-boolean vA, vB, field@CCCC"
  args_info: "A: source register (4 bits), B: object reference register (4 bits), C: field index (16 bits)"
  short_desc: "Store a boolean value into an instance field."
  long_desc: "Stores the boolean value from vA into the instance field specified by field@CCCC of the object referenced by vB."
  note: ""
  example: ""
  example_desc: ""

- opcode: "5D"
  name: "iput-byte"
  format: "B|A|op CCCC"
  format_id: "22c"
  syntax: "iput-byte vA, vB, field@CCCC"
  args_info: "A: source register (4 bits), B: object reference register (4 bits), C: field index (16 bits)"
  short_desc: "Store a byte value into an instance field."
  long_desc: "Stores the byte value from vA into the instance field specified by field@CCCC of the object referenced by vB."
  note: ""
  example: ""
  example_desc: ""

- opcode: "5E"
  name: "iput-char"
  format: "B|A|op CCCC"
  format_id: "22c"
  syntax: "iput-char vA, vB, field@CCCC"
  args_info: "A: source register (4 bits), B: object reference register (4 bits), C: field index (16 bits)"
  short_desc: "Store a char value into an instance field."
  long_desc: "Stores the char value from vA into the instance field specified by field@CCCC of the object referenced by vB."
  note: ""
  example: ""
  example_desc: ""

- opcode: "5F"
  name: "iput-short"
  format: "B|A|op CCCC"
  format_id: "22c"
  syntax: "iput-short vA, vB, field@CCCC"
  args_info: "A: source register (4 bits), B: object reference register (4 bits), C: field index (16 bits)"
  short_desc: "Store a short value into an instance field."
  long_desc: "Stores the short value from vA into the instance field specified by field@CCCC of the object referenced by vB."
  note: ""
  example: ""
  example_desc: ""

- opcode: "60"
  name: "sget"
  format: "AA|op BBBB"
  format_id: "21c"
  syntax: "sget vAA, field@BBBB"
  args_info: "A: destination register (8 bits), B: field index (16 bits)"
  short_desc: "Get a static field value."
  long_desc: "Retrieves the value of the static field specified by field@BBBB and stores it in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "61"
  name: "sget-wide"
  format: "AA|op BBBB"
  format_id: "21c"
  syntax: "sget-wide vAA, field@BBBB"
  args_info: "A: destination register pair (8 bits), B: field index (16 bits)"
  short_desc: "Get a long or double static field value."
  long_desc: "Retrieves the long or double value of the static field specified by field@BBBB and stores it in vAA,vAA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "62"
  name: "sget-object"
  format: "AA|op BBBB"
  format_id: "21c"
  syntax: "sget-object vAA, field@BBBB"
  args_info: "A: destination register (8 bits), B: field index (16 bits)"
  short_desc: "Get an object reference static field value."
  long_desc: "Retrieves the object reference of the static field specified by field@BBBB and stores it in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "63"
  name: "sget-boolean"
  format: "AA|op BBBB"
  format_id: "21c"
  syntax: "sget-boolean vAA, field@BBBB"
  args_info: "A: destination register (8 bits), B: field index (16 bits)"
  short_desc: "Get a boolean static field value."
  long_desc: "Retrieves the boolean value of the static field specified by field@BBBB and stores it in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "64"
  name: "sget-byte"
  format: "AA|op BBBB"
  format_id: "21c"
  syntax: "sget-byte vAA, field@BBBB"
  args_info: "A: destination register (8 bits), B: field index (16 bits)"
  short_desc: "Get a byte static field value."
  long_desc: "Retrieves the byte value of the static field specified by field@BBBB and stores it in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "65"
  name: "sget-char"
  format: "AA|op BBBB"
  format_id: "21c"
  syntax: "sget-char vAA, field@BBBB"
  args_info: "A: destination register (8 bits), B: field index (16 bits)"
  short_desc: "Get a char static field value."
  long_desc: "Retrieves the char value of the static field specified by field@BBBB and stores it in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "66"
  name: "sget-short"
  format: "AA|op BBBB"
  format_id: "21c"
  syntax: "sget-short vAA, field@BBBB"
  args_info: "A: destination register (8 bits), B: field index (16 bits)"
  short_desc: "Get a short static field value."
  long_desc: "Retrieves the short value of the static field specified by field@BBBB and stores it in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "67"
  name: "sput"
  format: "AA|op BBBB"
  format_id: "21c"
  syntax: "sput vAA, field@BBBB"
  args_info: "A: source register (8 bits), B: field index (16 bits)"
  short_desc: "Store a value into a static field."
  long_desc: "Stores the value from vAA into the static field specified by field@BBBB."
  note: ""
  example: ""
  example_desc: ""

- opcode: "68"
  name: "sput-wide"
  format: "AA|op BBBB"
  format_id: "21c"
  syntax: "sput-wide vAA, field@BBBB"
  args_info: "A: source register pair (8 bits), B: field index (16 bits)"
  short_desc: "Store a long or double value into a static field."
  long_desc: "Stores the long or double value from vAA,vAA+1 into the static field specified by field@BBBB."
  note: ""
  example: ""
  example_desc: ""

- opcode: "69"
  name: "sput-object"
  format: "AA|op BBBB"
  format_id: "21c"
  syntax: "sput-object vAA, field@BBBB"
  args_info: "A: source register (8 bits), B: field index (16 bits)"
  short_desc: "Store an object reference into a static field."
  long_desc: "Stores the object reference from vAA into the static field specified by field@BBBB."
  note: ""
  example: ""
  example_desc: ""

- opcode: "6A"
  name: "sput-boolean"
  format: "AA|op BBBB"
  format_id: "21c"
  syntax: "sput-boolean vAA, field@BBBB"
  args_info: "A: source register (8 bits), B: field index (16 bits)"
  short_desc: "Store a boolean value into a static field."
  long_desc: "Stores the boolean value from vAA into the static field specified by field@BBBB."
  note: ""
  example: ""
  example_desc: ""

- opcode: "6B"
  name: "sput-byte"
  format: "AA|op BBBB"
  format_id: "21c"
  syntax: "sput-byte vAA, field@BBBB"
  args_info: "A: source register (8 bits), B: field index (16 bits)"
  short_desc: "Store a byte value into a static field."
  long_desc: "Stores the byte value from vAA into the static field specified by field@BBBB."
  note: ""
  example: ""
  example_desc: ""

- opcode: "6C"
  name: "sput-char"
  format: "AA|op BBBB"
  format_id: "21c"
  syntax: "sput-char vAA, field@BBBB"
  args_info: "A: source register (8 bits), B: field index (16 bits)"
  short_desc: "Store a char value into a static field."
  long_desc: "Stores the char value from vAA into the static field specified by field@BBBB."
  note: ""
  example: ""
  example_desc: ""

- opcode: "6D"
  name: "sput-short"
  format: "AA|op BBBB"
  format_id: "21c"
  syntax: "sput-short vAA, field@BBBB"
  args_info: "A: source register (8 bits), B: field index (16 bits)"
  short_desc: "Store a short value into a static field."
  long_desc: "Stores the short value from vAA into the static field specified by field@BBBB."
  note: ""
  example: ""
  example_desc: ""

- opcode: "6E"
  name: "invoke-virtual"
  format: "A|G|op BBBB F|E|D|C"
  format_id: "35c"
  syntax: "invoke-virtual {vC, vD, vE, vF, vG}, meth@BBBB"
  args_info: "A: argument word count (4 bits), B: method index (16 bits), C..G: argument registers (4 bits each)"
  short_desc: "Invoke a virtual method."
  long_desc: "Invokes the virtual method specified by meth@BBBB with the arguments from the specified registers. The result (if any) can be stored with a `move-result*` instruction immediately following this one."
  note: "This is used to invoke normal virtual methods that are not `static`, `private`, or constructor."
  example: ""
  example_desc: ""

- opcode: "6F"
  name: "invoke-super"
  format: "A|G|op BBBB F|E|D|C"
  format_id: "35c"
  syntax: "invoke-super {vC, vD, vE, vF, vG}, meth@BBBB"
  args_info: "A: argument word count (4 bits), B: method index (16 bits), C..G: argument registers (4 bits each)"
  short_desc: "Invoke the closest superclass's virtual method."
  long_desc: "Invokes the closest superclass's virtual method specified by meth@BBBB with the arguments from the specified registers. This is used for methods that are not `static`, `private`, or constructor."
  note: "For interface methods, this invokes the most specific, non-overridden version of the method. In Dex files prior to version 037, having an interface `method_id` is illegal and undefined"
  example: ""
  example_desc: ""

- opcode: "70"
  name: "invoke-direct"
  format: "A|G|op BBBB F|E|D|C"
  format_id: "35c"
  syntax: "invoke-direct {vC, vD, vE, vF, vG}, meth@BBBB"
  args_info: "A: argument word count (4 bits), B: method index (16 bits), C..G: argument registers (4 bits each)"
  short_desc: "Invoke a direct method."
  long_desc: "Invokes the direct method specified by meth@BBBB with the arguments from the specified registers. Direct methods are non-overridable instance methods, such as `private` methods or constructor."
  note: ""
  example: ""
  example_desc: ""

- opcode: "71"
  name: "invoke-static"
  format: "A|G|op BBBB F|E|D|C"
  format_id: "35c"
  syntax: "invoke-static {vC, vD, vE, vF, vG}, meth@BBBB"
  args_info: "A: argument word count (4 bits), B: method index (16 bits), C..G: argument registers (4 bits each)"
  short_desc: "Invoke a static method."
  long_desc: "Invokes the static method specified by meth@BBBB with the arguments from the specified registers. Static methods are always direct methods."
  note: ""
  example: ""
  example_desc: ""

- opcode: "72"
  name: "invoke-interface"
  format: "A|G|op BBBB F|E|D|C"
  format_id: "35c"
  syntax: "invoke-interface {vC, vD, vE, vF, vG}, meth@BBBB"
  args_info: "A: argument word count (4 bits), B: method index (16 bits), C..G: argument registers (4 bits each)"
  short_desc: "Invoke an interface method."
  long_desc: "Invokes the interface method specified by meth@BBBB with the arguments from the specified registers. This is used for methods on objects whose concrete class is not known."
  note: ""
  example: ""
  example_desc: ""

- opcode: "73"
  name: "unused_73"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_73"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "74"
  name: "invoke-virtual/range"
  format: "AA|op BBBB CCCC"
  format_id: "3rc"
  syntax: "invoke-virtual/range {vCCCC .. vNNNN}, meth@BBBB"
  args_info: "A: argument word count (8 bits), B: method index (16 bits), C: first argument register (16 bits), N = A + C - 1"
  short_desc: "Invoke a virtual method with a range of registers."
  long_desc: "Invokes the virtual method specified by meth@BBBB with the arguments from the specified range of registers. The result (if any) can be stored with a `move-result*` instruction immediately following this one."
  note: ""
  example: ""
  example_desc: ""

- opcode: "75"
  name: "invoke-super/range"
  format: "AA|op BBBB CCCC"
  format_id: "3rc"
  syntax: "invoke-super/range {vCCCC .. vNNNN}, meth@BBBB"
  args_info: "A: argument word count (8 bits), B: method index (16 bits), C: first argument register (16 bits), N = A + C - 1"
  short_desc: "Invoke the closest superclass's virtual method with a range of registers."
  long_desc: "Invokes the closest superclass's virtual method specified by meth@BBBB with the arguments from the specified range of registers."
  note: ""
  example: ""
  example_desc: ""

- opcode: "76"
  name: "invoke-direct/range"
  format: "AA|op BBBB CCCC"
  format_id: "3rc"
  syntax: "invoke-direct/range {vCCCC .. vNNNN}, meth@BBBB"
  args_info: "A: argument word count (8 bits), B: method index (16 bits), C: first argument register (16 bits), N = A + C - 1"
  short_desc: "Invoke a direct method with a range of registers."
  long_desc: "Invokes the direct method specified by meth@BBBB with the arguments from the specified range of registers. Direct methods are non-overridable instance methods, such as `private` methods or constructors."
  note: ""
  example: ""
  example_desc: ""

- opcode: "77"
  name: "invoke-static/range"
  format: "AA|op BBBB CCCC"
  format_id: "3rc"
  syntax: "invoke-static/range {vCCCC .. vNNNN}, meth@BBBB"
  args_info: "A: argument word count (8 bits), B: method index (16 bits), C: first argument register (16 bits), N = A + C - 1"
  short_desc: "Invoke a static method with a range of registers."
  long_desc: "Invokes the static method specified by meth@BBBB with the arguments from the specified range of registers. Static methods are always direct methods."
  note: ""
  example: ""
  example_desc: ""

- opcode: "78"
  name: "invoke-interface/range"
  format: "AA|op BBBB CCCC"
  format_id: "3rc"
  syntax: "invoke-interface/range {vCCCC .. vNNNN}, meth@BBBB"
  args_info: "A: argument word count (8 bits), B: method index (16 bits), C: first argument register (16 bits), N = A + C - 1"
  short_desc: "Invoke an interface method with a range of registers."
  long_desc: "Invokes the interface method specified by meth@BBBB with the arguments from the specified range of registers. This is used for methods on objects whose concrete class is not known."
  note: ""
  example: ""
  example_desc: ""

- opcode: "79"
  name: "unused_79"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_79"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "7A"
  name: "unused_7A"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_7A"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "7B"
  name: "neg-int"
  format: "B|A|op"
  format_id: "12x"
  syntax: "neg-int vA, vB"
  args_info: "A: destination register (4 bits), B: source register (4 bits)"
  short_desc: "Negate an integer value."
  long_desc: "Negates the integer value in vB and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "7C"
  name: "not-int"
  format: "B|A|op"
  format_id: "12x"
  syntax: "not-int vA, vB"
  args_info: "A: destination register (4 bits), B: source register (4 bits)"
  short_desc: "Perform bitwise NOT on an integer value."
  long_desc: "Performs a bitwise NOT operation on the integer value in vB and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "7D"
  name: "neg-long"
  format: "B|A|op"
  format_id: "12x"
  syntax: "neg-long vA, vB"
  args_info: "A: destination register pair (4 bits), B: source register pair (4 bits)"
  short_desc: "Negate a long value."
  long_desc: "Negates the long value in vB,vB+1 and stores the result in vA,vA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "7E"
  name: "not-long"
  format: "B|A|op"
  format_id: "12x"
  syntax: "not-long vA, vB"
  args_info: "A: destination register pair (4 bits), B: source register pair (4 bits)"
  short_desc: "Perform bitwise NOT on a long value."
  long_desc: "Performs a bitwise NOT operation on the long value in vB,vB+1 and stores the result in vA,vA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "7F"
  name: "neg-float"
  format: "B|A|op"
  format_id: "12x"
  syntax: "neg-float vA, vB"
  args_info: "A: destination register (4 bits), B: source register (4 bits)"
  short_desc: "Negate a float value."
  long_desc: "Negates the float value in vB and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "80"
  name: "neg-double"
  format: "B|A|op"
  format_id: "12x"
  syntax: "neg-double vA, vB"
  args_info: "A: destination register pair (4 bits), B: source register pair (4 bits)"
  short_desc: "Negate a double value."
  long_desc: "Negates the double value in vB,vB+1 and stores the result in vA,vA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "81"
  name: "int-to-long"
  format: "B|A|op"
  format_id: "12x"
  syntax: "int-to-long vA, vB"
  args_info: "A: destination register pair (4 bits), B: source register (4 bits)"
  short_desc: "Convert an integer to a long."
  long_desc: "Converts the integer value in vB to a long value and stores the result in vA,vA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "82"
  name: "int-to-float"
  format: "B|A|op"
  format_id: "12x"
  syntax: "int-to-float vA, vB"
  args_info: "A: destination register (4 bits), B: source register (4 bits)"
  short_desc: "Convert an integer to a float."
  long_desc: "Converts the integer value in vB to a float value and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "83"
  name: "int-to-double"
  format: "B|A|op"
  format_id: "12x"
  syntax: "int-to-double vA, vB"
  args_info: "A: destination register pair (4 bits), B: source register (4 bits)"
  short_desc: "Convert an integer to a double."
  long_desc: "Converts the integer value in vB to a double value and stores the result in vA,vA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "84"
  name: "long-to-int"
  format: "B|A|op"
  format_id: "12x"
  syntax: "long-to-int vA, vB"
  args_info: "A: destination register (4 bits), B: source register pair (4 bits)"
  short_desc: "Convert a long to an integer."
  long_desc: "Converts the long value in vB,vB+1 to an integer value and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "85"
  name: "long-to-float"
  format: "B|A|op"
  format_id: "12x"
  syntax: "long-to-float vA, vB"
  args_info: "A: destination register (4 bits), B: source register pair (4 bits)"
  short_desc: "Convert a long to a float."
  long_desc: "Converts the long value in vB,vB+1 to a float value and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "86"
  name: "long-to-double"
  format: "B|A|op"
  format_id: "12x"
  syntax: "long-to-double vA, vB"
  args_info: "A: destination register pair (4 bits), B: source register pair (4 bits)"
  short_desc: "Convert a long to a double."
  long_desc: "Converts the long value in vB,vB+1 to a double value and stores the result in vA,vA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "87"
  name: "float-to-int"
  format: "B|A|op"
  format_id: "12x"
  syntax: "float-to-int vA, vB"
  args_info: "A: destination register (4 bits), B: source register (4 bits)"
  short_desc: "Convert a float to an integer."
  long_desc: "Converts the float value in vB to an integer value and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "88"
  name: "float-to-long"
  format: "B|A|op"
  format_id: "12x"
  syntax: "float-to-long vA, vB"
  args_info: "A: destination register pair (4 bits), B: source register (4 bits)"
  short_desc: "Convert a float to a long."
  long_desc: "Converts the float value in vB to a long value and stores the result in vA,vA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "89"
  name: "float-to-double"
  format: "B|A|op"
  format_id: "12x"
  syntax: "float-to-double vA, vB"
  args_info: "A: destination register pair (4 bits), B: source register (4 bits)"
  short_desc: "Convert a float to a double."
  long_desc: "Converts the float value in vB to a double value and stores the result in vA,vA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "8A"
  name: "double-to-int"
  format: "B|A|op"
  format_id: "12x"
  syntax: "double-to-int vA, vB"
  args_info: "A: destination register (4 bits), B: source register pair (4 bits)"
  short_desc: "Convert a double to an integer."
  long_desc: "Converts the double value in vB,vB+1 to an integer value and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "8B"
  name: "double-to-long"
  format: "B|A|op"
  format_id: "12x"
  syntax: "double-to-long vA, vB"
  args_info: "A: destination register pair (4 bits), B: source register pair (4 bits)"
  short_desc: "Convert a double to a long."
  long_desc: "Converts the double value in vB,vB+1 to a long value and stores the result in vA,vA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "8C"
  name: "double-to-float"
  format: "B|A|op"
  format_id: "12x"
  syntax: "double-to-float vA, vB"
  args_info: "A: destination register (4 bits), B: source register pair (4 bits)"
  short_desc: "Convert a double to a float."
  long_desc: "Converts the double value in vB,vB+1 to a float value and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "8D"
  name: "int-to-byte"
  format: "B|A|op"
  format_id: "12x"
  syntax: "int-to-byte vA, vB"
  args_info: "A: destination register (4 bits), B: source register (4 bits)"
  short_desc: "Convert an integer to a byte."
  long_desc: "Converts the integer value in vB to a byte value and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "8E"
  name: "int-to-char"
  format: "B|A|op"
  format_id: "12x"
  syntax: "int-to-char vA, vB"
  args_info: "A: destination register (4 bits), B: source register (4 bits)"
  short_desc: "Convert an integer to a char."
  long_desc: "Converts the integer value in vB to a char value and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "8F"
  name: "int-to-short"
  format: "B|A|op"
  format_id: "12x"
  syntax: "int-to-short vA, vB"
  args_info: "A: destination register (4 bits), B: source register (4 bits)"
  short_desc: "Convert an integer to a short."
  long_desc: "Converts the integer value in vB to a short value and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "90"
  name: "add-int"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "add-int vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: first source register (8 bits), C: second source register (8 bits)"
  short_desc: "Add two integer values."
  long_desc: "Adds the integer values in vBB and vCC and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "91"
  name: "sub-int"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "sub-int vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: first source register (8 bits), C: second source register (8 bits)"
  short_desc: "Subtract two integer values."
  long_desc: "Subtracts the integer value in vCC from the integer value in vBB and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "92"
  name: "mul-int"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "mul-int vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: first source register (8 bits), C: second source register (8 bits)"
  short_desc: "Multiply two integer values."
  long_desc: "Multiplies the integer values in vBB and vCC and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "93"
  name: "div-int"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "div-int vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: first source register (8 bits), C: second source register (8 bits)"
  short_desc: "Divide two integer values."
  long_desc: "Divides the integer value in vBB by the integer value in vCC and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "94"
  name: "rem-int"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "rem-int vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: first source register (8 bits), C: second source register (8 bits)"
  short_desc: "Compute the remainder of two integer values."
  long_desc: "Computes the remainder of the integer value in vBB divided by the integer value in vCC and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "95"
  name: "and-int"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "and-int vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: first source register (8 bits), C: second source register (8 bits)"
  short_desc: "Perform bitwise AND on two integer values."
  long_desc: "Performs a bitwise AND operation on the integer values in vBB and vCC and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "96"
  name: "or-int"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "or-int vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: first source register (8 bits), C: second source register (8 bits)"
  short_desc: "Perform bitwise OR on two integer values."
  long_desc: "Performs a bitwise OR operation on the integer values in vBB and vCC and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "97"
  name: "xor-int"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "xor-int vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: first source register (8 bits), C: second source register (8 bits)"
  short_desc: "Perform bitwise XOR on two integer values."
  long_desc: "Performs a bitwise XOR operation on the integer values in vBB and vCC and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "98"
  name: "shl-int"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "shl-int vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: first source register (8 bits), C: second source register (8 bits)"
  short_desc: "Shift an integer value left."
  long_desc: "Shifts the integer value in vBB left by the number of bits specified in vCC and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "99"
  name: "shr-int"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "shr-int vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: first source register (8 bits), C: second source register (8 bits)"
  short_desc: "Shift an integer value right."
  long_desc: "Shifts the integer value in vBB right by the number of bits specified in vCC and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "9A"
  name: "ushr-int"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "ushr-int vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: first source register (8 bits), C: second source register (8 bits)"
  short_desc: "Unsigned shift an integer value right."
  long_desc: "Performs an unsigned right shift on the integer value in vBB by the number of bits specified in vCC and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "9B"
  name: "add-long"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "add-long vAA, vBB, vCC"
  args_info: "A: destination register pair (8 bits), B: first source register pair (8 bits), C: second source register pair (8 bits)"
  short_desc: "Add two long values."
  long_desc: "Adds the long values in vBB,vBB+1 and vCC,vCC+1 and stores the result in vAA,vAA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "9C"
  name: "sub-long"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "sub-long vAA, vBB, vCC"
  args_info: "A: destination register pair (8 bits), B: first source register pair (8 bits), C: second source register pair (8 bits)"
  short_desc: "Subtract two long values."
  long_desc: "Subtracts the long value in vCC,vCC+1 from the long value in vBB,vBB+1 and stores the result in vAA,vAA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "9D"
  name: "mul-long"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "mul-long vAA, vBB, vCC"
  args_info: "A: destination register pair (8 bits), B: first source register pair (8 bits), C: second source register pair (8 bits)"
  short_desc: "Multiply two long values."
  long_desc: "Multiplies the long values in vBB,vBB+1 and vCC,vCC+1 and stores the result in vAA,vAA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "9E"
  name: "div-long"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "div-long vAA, vBB, vCC"
  args_info: "A: destination register pair (8 bits), B: first source register pair (8 bits), C: second source register pair (8 bits)"
  short_desc: "Divide two long values."
  long_desc: "Divides the long value in vBB,vBB+1 by the long value in vCC,vCC+1 and stores the result in vAA,vAA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "9F"
  name: "rem-long"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "rem-long vAA, vBB, vCC"
  args_info: "A: destination register pair (8 bits), B: first source register pair (8 bits), C: second source register pair (8 bits)"
  short_desc: "Compute the remainder of two long values."
  long_desc: "Computes the remainder of the long value in vBB,vBB+1 divided by the long value in vCC,vCC+1 and stores the result in vAA,vAA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "A0"
  name: "and-long"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "and-long vAA, vBB, vCC"
  args_info: "A: destination register pair (8 bits), B: first source register pair (8 bits), C: second source register pair (8 bits)"
  short_desc: "Perform bitwise AND on two long values."
  long_desc: "Performs a bitwise AND operation on the long values in vBB,vBB+1 and vCC,vCC+1 and stores the result in vAA,vAA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "A1"
  name: "or-long"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "or-long vAA, vBB, vCC"
  args_info: "A: destination register pair (8 bits), B: first source register pair (8 bits), C: second source register pair (8 bits)"
  short_desc: "Perform bitwise OR on two long values."
  long_desc: "Performs a bitwise OR operation on the long values in vBB,vBB+1 and vCC,vCC+1 and stores the result in vAA,vAA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "A2"
  name: "xor-long"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "xor-long vAA, vBB, vCC"
  args_info: "A: destination register pair (8 bits), B: first source register pair (8 bits), C: second source register pair (8 bits)"
  short_desc: "Perform bitwise XOR on two long values."
  long_desc: "Performs a bitwise XOR operation on the long values in vBB,vBB+1 and vCC,vCC+1 and stores the result in vAA,vAA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "A3"
  name: "shl-long"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "shl-long vAA, vBB, vCC"
  args_info: "A: destination register pair (8 bits), B: first source register pair (8 bits), C: second source register (8 bits)"
  short_desc: "Shift a long value left."
  long_desc: "Shifts the long value in vBB,vBB+1 left by the number of bits specified in vCC and stores the result in vAA,vAA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "A4"
  name: "shr-long"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "shr-long vAA, vBB, vCC"
  args_info: "A: destination register pair (8 bits), B: first source register pair (8 bits), C: second source register (8 bits)"
  short_desc: "Shift a long value right."
  long_desc: "Shifts the long value in vBB,vBB+1 right by the number of bits specified in vCC and stores the result in vAA,vAA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "A5"
  name: "ushr-long"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "ushr-long vAA, vBB, vCC"
  args_info: "A: destination register pair (8 bits), B: first source register pair (8 bits), C: second source register (8 bits)"
  short_desc: "Unsigned shift a long value right."
  long_desc: "Performs an unsigned right shift on the long value in vBB,vBB+1 by the number of bits specified in vCC and stores the result in vAA,vAA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "A6"
  name: "add-float"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "add-float vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: first source register (8 bits), C: second source register (8 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the destination register."
  long_desc: "Adds the float value in vBB to the float value in vCC and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "A7"
  name: "sub-float"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "sub-float vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: first source register (8 bits), C: second source register (8 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the destination register."
  long_desc: "Subtracts the float value in vCC from the float value in vBB and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "A8"
  name: "mul-float"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "mul-float vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: first source register (8 bits), C: second source register (8 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the destination register."
  long_desc: "Multiplies the float value in vBB by the float value in vCC and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "A9"
  name: "div-float"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "div-float vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: first source register (8 bits), C: second source register (8 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the destination register."
  long_desc: "Divides the float value in vBB by the float value in vCC and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "AA"
  name: "rem-float"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "rem-float vAA, vBB, vCC"
  args_info: "A: destination register (8 bits), B: first source register (8 bits), C: second source register (8 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the destination register."
  long_desc: "Calculates the remainder of the division of the float value in vBB by the float value in vCC and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "AB"
  name: "add-double"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "add-double vAA, vBB, vCC"
  args_info: "A: destination register pair (8 bits), B: first source register pair (8 bits), C: second source register pair (8 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the destination register."
  long_desc: "Adds the double value in vBB,vBB+1 to the double value in vCC,vCC+1 and stores the result in vAA,vAA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "AC"
  name: "sub-double"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "sub-double vAA, vBB, vCC"
  args_info: "A: destination register pair (8 bits), B: first source register pair (8 bits), C: second source register pair (8 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the destination register."
  long_desc: "Subtracts the double value in vCC,vCC+1 from the double value in vBB,vBB+1 and stores the result in vAA,vAA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "AD"
  name: "mul-double"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "mul-double vAA, vBB, vCC"
  args_info: "A: destination register pair (8 bits), B: first source register pair (8 bits), C: second source register pair (8 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the destination register."
  long_desc: "Multiplies the double value in vBB,vBB+1 by the double value in vCC,vCC+1 and stores the result in vAA,vAA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "AE"
  name: "div-double"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "div-double vAA, vBB, vCC"
  args_info: "A: destination register pair (8 bits), B: first source register pair (8 bits), C: second source register pair (8 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the destination register."
  long_desc: "Divides the double value in vBB,vBB+1 by the double value in vCC,vCC+1 and stores the result in vAA,vAA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "AF"
  name: "rem-double"
  format: "AA|op BB CC"
  format_id: "23x"
  syntax: "rem-double vAA, vBB, vCC"
  args_info: "A: destination register pair (8 bits), B: first source register pair (8 bits), C: second source register pair (8 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the destination register."
  long_desc: "Calculates the remainder of the division of the double value in vBB,vBB+1 by the double value in vCC,vCC+1 and stores the result in vAA,vAA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "B0"
  name: "add-int/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "add-int/2addr vA, vB"
  args_info: "A: destination and first source register (4 bits), B: second source register (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Adds the int value in vB to the int value in vA and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "B1"
  name: "sub-int/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "sub-int/2addr vA, vB"
  args_info: "A: destination and first source register (4 bits), B: second source register (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Subtracts the int value in vB from the int value in vA and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "B2"
  name: "mul-int/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "mul-int/2addr vA, vB"
  args_info: "A: destination and first source register (4 bits), B: second source register (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Multiplies the int value in vA by the int value in vB and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "B3"
  name: "div-int/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "div-int/2addr vA, vB"
  args_info: "A: destination and first source register (4 bits), B: second source register (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Divides the int value in vA by the int value in vB and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "B4"
  name: "rem-int/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "rem-int/2addr vA, vB"
  args_info: "A: destination and first source register (4 bits), B: second source register (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Calculates the remainder of the division of the int value in vA by the int value in vB and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "B5"
  name: "and-int/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "and-int/2addr vA, vB"
  args_info: "A: destination and first source register (4 bits), B: second source register (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Performs a bitwise AND operation on the int value in vA and the int value in vB and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "B6"
  name: "or-int/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "or-int/2addr vA, vB"
  args_info: "A: destination and first source register (4 bits), B: second source register (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Performs a bitwise OR operation on the int value in vA and the int value in vB and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "B7"
  name: "xor-int/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "xor-int/2addr vA, vB"
  args_info: "A: destination and first source register (4 bits), B: second source register (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Performs a bitwise XOR operation on the int value in vA and the int value in vB and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "B8"
  name: "shl-int/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "shl-int/2addr vA, vB"
  args_info: "A: destination and first source register (4 bits), B: second source register (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Shifts the int value in vA left by the number of bits specified in vB and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "B9"
  name: "shr-int/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "shr-int/2addr vA, vB"
  args_info: "A: destination and first source register (4 bits), B: second source register (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Shifts the int value in vA right by the number of bits specified in vB and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "BA"
  name: "ushr-int/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "ushr-int/2addr vA, vB"
  args_info: "A: destination and first source register (4 bits), B: second source register (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Performs an unsigned right shift on the int value in vA by the number of bits specified in vB and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "BB"
  name: "add-long/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "add-long/2addr vA, vB"
  args_info: "A: destination and first source register pair (4 bits), B: second source register pair (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Adds the long value in vB,vB+1 to the long value in vA,vA+1 and stores the result in vA,vA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "BC"
  name: "sub-long/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "sub-long/2addr vA, vB"
  args_info: "A: destination and first source register pair (4 bits), B: second source register pair (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Subtracts the long value in vB,vB+1 from the long value in vA,vA+1 and stores the result in vA,vA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "BD"
  name: "mul-long/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "mul-long/2addr vA, vB"
  args_info: "A: destination and first source register pair (4 bits), B: second source register pair (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Multiplies the long value in vA,vA+1 by the long value in vB,vB+1 and stores the result in vA,vA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "BE"
  name: "div-long/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "div-long/2addr vA, vB"
  args_info: "A: destination and first source register pair (4 bits), B: second source register pair (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Divides the long value in vA,vA+1 by the long value in vB,vB+1 and stores the result in vA,vA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "BF"
  name: "rem-long/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "rem-long/2addr vA, vB"
  args_info: "A: destination and first source register pair (4 bits), B: second source register pair (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Calculates the remainder of the division of the long value in vA,vA+1 by the long value in vB,vB+1 and stores the result in vA,vA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "C0"
  name: "and-long/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "and-long/2addr vA, vB"
  args_info: "A: destination and first source register pair (4 bits), B: second source register pair (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Performs a bitwise AND operation on the long value in vA,vA+1 and the long value in vB,vB+1 and stores the result in vA,vA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "C1"
  name: "or-long/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "or-long/2addr vA, vB"
  args_info: "A: destination and first source register pair (4 bits), B: second source register pair (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Performs a bitwise OR operation on the long value in vA,vA+1 and the long value in vB,vB+1 and stores the result in vA,vA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "C2"
  name: "xor-long/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "xor-long/2addr vA, vB"
  args_info: "A: destination and first source register pair (4 bits), B: second source register pair (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Performs a bitwise XOR operation on the long value in vA,vA+1 and the long value in vB,vB+1 and stores the result in vA,vA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "C3"
  name: "shl-long/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "shl-long/2addr vA, vB"
  args_info: "A: destination and first source register pair (4 bits), B: second source register (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Shifts the long value in vA,vA+1 left by the number of bits specified in vB and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "C4"
  name: "shr-long/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "shr-long/2addr vA, vB"
  args_info: "A: destination and first source register pair (4 bits), B: second source register (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Shifts the long value in vA,vA+1 right by the number of bits specified in vB and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "C5"
  name: "ushr-long/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "ushr-long/2addr vA, vB"
  args_info: "A: destination and first source register pair (4 bits), B: second source register (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Performs an unsigned right shift on the long value in vA,vA+1 by the number of bits specified in vB and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "C6"
  name: "add-float/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "add-float/2addr vA, vB"
  args_info: "A: destination and first source register (4 bits), B: second source register (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Adds the float value in vB to the float value in vA and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "C7"
  name: "sub-float/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "sub-float/2addr vA, vB"
  args_info: "A: destination and first source register (4 bits), B: second source register (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Subtracts the float value in vB from the float value in vA and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "C8"
  name: "mul-float/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "mul-float/2addr vA, vB"
  args_info: "A: destination and first source register (4 bits), B: second source register (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Multiplies the float value in vA by the float value in vB and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "C9"
  name: "div-float/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "div-float/2addr vA, vB"
  args_info: "A: destination and first source register (4 bits), B: second source register (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Divides the float value in vA by the float value in vB and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "CA"
  name: "rem-float/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "rem-float/2addr vA, vB"
  args_info: "A: destination and first source register (4 bits), B: second source register (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Calculates the remainder of the division of the float value in vA by the float value in vB and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "CB"
  name: "add-double/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "add-double/2addr vA, vB"
  args_info: "A: destination and first source register pair (4 bits), B: second source register pair (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Adds the double value in vB,vB+1 to the double value in vA,vA+1 and stores the result in vA,vA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "CC"
  name: "sub-double/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "sub-double/2addr vA, vB"
  args_info: "A: destination and first source register pair (4 bits), B: second source register pair (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Subtracts the double value in vB,vB+1 from the double value in vA,vA+1 and stores the result in vA,vA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "CD"
  name: "mul-double/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "mul-double/2addr vA, vB"
  args_info: "A: destination and first source register pair (4 bits), B: second source register pair (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Multiplies the double value in vA,vA+1 by the double value in vB,vB+1 and stores the result in vA,vA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "CE"
  name: "div-double/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "div-double/2addr vA, vB"
  args_info: "A: destination and first source register pair (4 bits), B: second source register pair (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Divides the double value in vA,vA+1 by the double value in vB,vB+1 and stores the result in vA,vA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "CF"
  name: "rem-double/2addr"
  format: "B|A|op"
  format_id: "12x"
  syntax: "rem-double/2addr vA, vB"
  args_info: "A: destination and first source register pair (4 bits), B: second source register pair (4 bits)"
  short_desc: "Perform the identified binary operation on the two source registers, storing the result in the first source register."
  long_desc: "Calculates the remainder of the division of the double value in vA,vA+1 by the double value in vB,vB+1 and stores the result in vA,vA+1."
  note: ""
  example: ""
  example_desc: ""

- opcode: "D0"
  name: "add-int/lit16"
  format: "B|A|op CCCC"
  format_id: "22s"
  syntax: "add-int/lit16 vA, vB, #+CCCC"
  args_info: "A: destination register (4 bits), B: source register (4 bits), C: signed int constant (16 bits)"
  short_desc: "Perform the indicated binary op on the indicated register (first argument) and literal value (second argument), storing the result in the destination register."
  long_desc: "Adds the int value in vB to the literal value CCCC and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "D1"
  name: "rsub-int"
  format: "B|A|op CCCC"
  format_id: "22s"
  syntax: "rsub-int/lit16 vA, vB, #+CCCC"
  args_info: "A: destination register (4 bits), B: source register (4 bits), C: signed int constant (16 bits)"
  short_desc: "Perform the indicated binary op on the indicated register (first argument) and literal value (second argument), storing the result in the destination register."
  long_desc: "Subtracts the int value in vB from the literal value CCCC and stores the result in vA."
  note: "It does not have a suffix since this version is the main opcode of its family."
  example: ""
  example_desc: ""

- opcode: "D2"
  name: "mul-int/lit16"
  format: "B|A|op CCCC"
  format_id: "22s"
  syntax: "mul-int/lit16 vA, vB, #+CCCC"
  args_info: "A: destination register (4 bits), B: source register (4 bits), C: signed int constant (16 bits)"
  short_desc: "Perform the indicated binary op on the indicated register (first argument) and literal value (second argument), storing the result in the destination register."
  long_desc: "Multiplies the int value in vB by the literal value CCCC and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "D3"
  name: "div-int/lit16"
  format: "B|A|op CCCC"
  format_id: "22s"
  syntax: "div-int/lit16 vA, vB, #+CCCC"
  args_info: "A: destination register (4 bits), B: source register (4 bits), C: signed int constant (16 bits)"
  short_desc: "Perform the indicated binary op on the indicated register (first argument) and literal value (second argument), storing the result in the destination register."
  long_desc: "Divides the int value in vB by the literal value CCCC and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "D4"
  name: "rem-int/lit16"
  format: "B|A|op CCCC"
  format_id: "22s"
  syntax: "rem-int/lit16 vA, vB, #+CCCC"
  args_info: "A: destination register (4 bits), B: source register (4 bits), C: signed int constant (16 bits)"
  short_desc: "Perform the indicated binary op on the indicated register (first argument) and literal value (second argument), storing the result in the destination register."
  long_desc: "Calculates the remainder of the division of the int value in vB by the literal value CCCC and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "D5"
  name: "and-int/lit16"
  format: "B|A|op CCCC"
  format_id: "22s"
  syntax: "and-int/lit16 vA, vB, #+CCCC"
  args_info: "A: destination register (4 bits), B: source register (4 bits), C: signed int constant (16 bits)"
  short_desc: "Perform the indicated binary op on the indicated register (first argument) and literal value (second argument), storing the result in the destination register."
  long_desc: "Performs a bitwise AND operation on the int value in vB and the literal value CCCC and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "D6"
  name: "or-int/lit16"
  format: "B|A|op CCCC"
  format_id: "22s"
  syntax: "or-int/lit16 vA, vB, #+CCCC"
  args_info: "A: destination register (4 bits), B: source register (4 bits), C: signed int constant (16 bits)"
  short_desc: "Perform the indicated binary op on the indicated register (first argument) and literal value (second argument), storing the result in the destination register."
  long_desc: "Performs a bitwise OR operation on the int value in vB and the literal value CCCC and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "D7"
  name: "xor-int/lit16"
  format: "B|A|op CCCC"
  format_id: "22s"
  syntax: "xor-int/lit16 vA, vB, #+CCCC"
  args_info: "A: destination register (4 bits), B: source register (4 bits), C: signed int constant (16 bits)"
  short_desc: "Perform the indicated binary op on the indicated register (first argument) and literal value (second argument), storing the result in the destination register."
  long_desc: "Performs a bitwise XOR operation on the int value in vB and the literal value CCCC and stores the result in vA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "D8"
  name: "add-int/lit8"
  format: "AA|op BB CC"
  format_id: "22b"
  syntax: "add-int/lit8 vAA, vBB, #+CC"
  args_info: "A: destination register (8 bits), B: source register (8 bits), C: signed int constant (8 bits)"
  short_desc: "Perform the indicated binary op on the indicated register (first argument) and literal value (second argument), storing the result in the destination register."
  long_desc: "Adds the int value in vBB to the literal value CC and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "D9"
  name: "rsub-int/lit8"
  format: "AA|op BB CC"
  format_id: "22b"
  syntax: "rsub-int/lit8 vAA, vBB, #+CC"
  args_info: "A: destination register (8 bits), B: source register (8 bits), C: signed int constant (8 bits)"
  short_desc: "Perform the indicated binary op on the indicated register (first argument) and literal value (second argument), storing the result in the destination register."
  long_desc: "Subtracts the int value in vBB from the literal value CC and stores the result in vAA."
  note: "See details on the semantics of rsub-int."
  example: ""
  example_desc: ""

- opcode: "DA"
  name: "mul-int/lit8"
  format: "AA|op BB CC"
  format_id: "22b"
  syntax: "mul-int/lit8 vAA, vBB, #+CC"
  args_info: "A: destination register (8 bits), B: source register (8 bits), C: signed int constant (8 bits)"
  short_desc: "Perform the indicated binary op on the indicated register (first argument) and literal value (second argument), storing the result in the destination register."
  long_desc: "Multiplies the int value in vBB by the literal value CC and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "DB"
  name: "div-int/lit8"
  format: "AA|op BB CC"
  format_id: "22b"
  syntax: "div-int/lit8 vAA, vBB, #+CC"
  args_info: "A: destination register (8 bits), B: source register (8 bits), C: signed int constant (8 bits)"
  short_desc: "Perform the indicated binary op on the indicated register (first argument) and literal value (second argument), storing the result in the destination register."
  long_desc: "Divides the int value in vBB by the literal value CC and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "DC"
  name: "rem-int/lit8"
  format: "AA|op BB CC"
  format_id: "22b"
  syntax: "rem-int/lit8 vAA, vBB, #+CC"
  args_info: "A: destination register (8 bits), B: source register (8 bits), C: signed int constant (8 bits)"
  short_desc: "Perform the indicated binary op on the indicated register (first argument) and literal value (second argument), storing the result in the destination register."
  long_desc: "Calculates the remainder of the division of the int value in vBB by the literal value CC and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "DD"
  name: "and-int/lit8"
  format: "AA|op BB CC"
  format_id: "22b"
  syntax: "and-int/lit8 vAA, vBB, #+CC"
  args_info: "A: destination register (8 bits), B: source register (8 bits), C: signed int constant (8 bits)"
  short_desc: "Perform the indicated binary op on the indicated register (first argument) and literal value (second argument), storing the result in the destination register."
  long_desc: "Performs a bitwise AND operation on the int value in vBB and the literal value CC and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "DE"
  name: "or-int/lit8"
  format: "AA|op BB CC"
  format_id: "22b"
  syntax: "or-int/lit8 vAA, vBB, #+CC"
  args_info: "A: destination register (8 bits), B: source register (8 bits), C: signed int constant (8 bits)"
  short_desc: "Perform the indicated binary op on the indicated register (first argument) and literal value (second argument), storing the result in the destination register."
  long_desc: "Performs a bitwise OR operation on the int value in vBB and the literal value CC and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "DF"
  name: "xor-int/lit8"
  format: "AA|op BB CC"
  format_id: "22b"
  syntax: "xor-int/lit8 vAA, vBB, #+CC"
  args_info: "A: destination register (8 bits), B: source register (8 bits), C: signed int constant (8 bits)"
  short_desc: "Perform the indicated binary op on the indicated register (first argument) and literal value (second argument), storing the result in the destination register."
  long_desc: "Performs a bitwise XOR operation on the int value in vBB and the literal value CC and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "E0"
  name: "shl-int/lit8"
  format: "AA|op BB CC"
  format_id: "22b"
  syntax: "shl-int/lit8 vAA, vBB, #+CC"
  args_info: "A: destination register (8 bits), B: source register (8 bits), C: signed int constant (8 bits)"
  short_desc: "Perform the indicated binary op on the indicated register (first argument) and literal value (second argument), storing the result in the destination register."
  long_desc: "Shifts the int value in vBB left by the number of bits specified by the literal value CC and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "E1"
  name: "shr-int/lit8"
  format: "AA|op BB CC"
  format_id: "22b"
  syntax: "shr-int/lit8 vAA, vBB, #+CC"
  args_info: "A: destination register (8 bits), B: source register (8 bits), C: signed int constant (8 bits)"
  short_desc: "Perform the indicated binary op on the indicated register (first argument) and literal value (second argument), storing the result in the destination register."
  long_desc: "Shifts the int value in vBB right by the number of bits specified by the literal value CC and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "E2"
  name: "ushr-int/lit8"
  format: "AA|op BB CC"
  format_id: "22b"
  syntax: "ushr-int/lit8 vAA, vBB, #+CC"
  args_info: "A: destination register (8 bits), B: source register (8 bits), C: signed int constant (8 bits)"
  short_desc: "Perform the indicated binary op on the indicated register (first argument) and literal value (second argument), storing the result in the destination register."
  long_desc: "Performs an unsigned right shift on the int value in vBB by the number of bits specified by the literal value CC and stores the result in vAA."
  note: ""
  example: ""
  example_desc: ""

- opcode: "E3"
  name: "unused_E3"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_E3"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "E4"
  name: "unused_E4"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_E4"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "E5"
  name: "unused_E5"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_E5"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "E6"
  name: "unused_E6"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_E6"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "E7"
  name: "unused_E7"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_E7"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "E8"
  name: "unused_E8"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_E8"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "E9"
  name: "unused_E9"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_E9"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "EA"
  name: "unused_EA"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_EA"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "EB"
  name: "unused_EB"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_EB"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "EC"
  name: "unused_EC"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_EC"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "ED"
  name: "unused_ED"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_ED"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "EE"
  name: "unused_EE"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_EE"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "EF"
  name: "unused_EF"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_EF"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "F0"
  name: "unused_F0"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_F0"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "F1"
  name: "unused_F1"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_F1"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "F2"
  name: "unused_F2"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_F2"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "F3"
  name: "unused_F3"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_F3"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "F4"
  name: "unused_F4"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_F4"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "F5"
  name: "unused_F5"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_F5"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "F6"
  name: "unused_F6"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_F6"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "F7"
  name: "unused_F7"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_F7"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "F8"
  name: "unused_F8"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_F8"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "F9"
  name: "unused_F9"
  format: "ØØ|op"
  format_id: "10x"
  syntax: "unused_F9"
  args_info: ""
  short_desc: "Unused opcode."
  long_desc: "This opcode is currently unused and reserved for future use."
  note: ""
  example: ""
  example_desc: ""

- opcode: "FA"
  name: "invoke-polymorphic"
  format: "A|G|op BBBB F|E|D|C HHHH"
  format_id: "45cc"
  syntax: "invoke-polymorphic {vC, vD, vE, vF, vG}, meth@BBBB, proto@HHHH"
  args_info: "A: argument word count (4 bits), B: method reference index (16 bits), C: receiver (4 bits), D..G: argument registers (4 bits each), H: prototype reference index (16 bits)"
  short_desc: "Invoke the indicated signature polymorphic method."
  long_desc: "Invokes the signature polymorphic method specified by meth@BBBB with the arguments in registers vC, vD, vE, vF, and vG, according to the prototype specified by proto@HHHH. The method reference must be to a signature polymorphic method, such as `java.lang.invoke.MethodHandle.invoke` or `java.lang.invoke.MethodHandle.invokeExact`. The receiver must be an object supporting the signature polymorphic method being invoked."
  note: "Present in Dex files from version `038` onwards."
  example: ""
  example_desc: ""

- opcode: "FB"
  name: "invoke-polymorphic/range"
  format: "AA|op BBBB CCCC HHHH"
  format_id: "4rcc"
  syntax: "invoke-polymorphic/range {vCCCC .. vNNNN}, meth@BBBB, proto@HHHH"
  args_info: "A: argument word count (8 bits), B: method reference index (16 bits), C: receiver (16 bits), H: prototype reference index (16 bits), N = A + C - 1"
  short_desc: "Invoke the indicated signature polymorphic method."
  long_desc: "Invokes the signature polymorphic method specified by meth@BBBB with the arguments in the range of registers from vCCCC to vNNNN, according to the prototype specified by proto@HHHH. The method reference must be to a signature polymorphic method. The receiver must be an object supporting the signature polymorphic method being invoked."
  note: "Present in Dex files from version `038` onwards."
  example: ""
  example_desc: ""

- opcode: "FC"
  name: "invoke-custom"
  format: "A|G|op BBBB F|E|D|C"
  format_id: "35c"
  syntax: "invoke-custom {vC, vD, vE, vF, vG}, call_site@BBBB"
  args_info: "A: argument word count (4 bits), B: call site reference index (16 bits), C..G: argument registers (4 bits each)"
  short_desc: "Resolves and invokes the indicated call site."
  long_desc: "Resolves and invokes the call site specified by call_site@BBBB. This instruction executes in two phases: call site resolution and call site invocation. If the call site does not have an associated `java.lang.invoke.CallSite` instance, the bootstrap linker method is invoked. The bootstrap linker method returns a `java.lang.invoke.CallSite` instance, which is then associated with the call site. Call site invocation is made on the `java.lang.invoke.MethodHandle` target of the resolved `java.lang.invoke.CallSite` instance. The target is invoked as if executing `invoke-polymorphic`."
  note: "Present in Dex files from version `038` onwards."
  example: ""
  example_desc: ""

- opcode: "FD"
  name: "invoke-custom/range"
  format: "AA|op BBBB CCCC"
  format_id: "3rc"
  syntax: "invoke-custom/range {vCCCC .. vNNNN}, call_site@BBBB"
  args_info: "A: argument word count (8 bits), B: call site reference index (16 bits), C: first argument register (16-bits), N = A + C - 1"
  short_desc: "Resolve and invoke a call site."
  long_desc: "Resolves and invokes the call site specified by call_site@BBBB with arguments in the range of registers from vCCCC to vNNNN. This instruction follows the same two-phase execution as `invoke-custom`: call site resolution and call site invocation."
  note: "Present in Dex files from version `038` onwards."
  example: ""
  example_desc: ""

- opcode: "FE"
  name: "const-method-handle"
  format: "AA|op BBBB"
  format_id: "21c"
  syntax: "const-method-handle vAA, method_handle@BBBB"
  args_info: "A: destination register (8 bits), B: method handle index (16 bits)"
  short_desc: "Move a reference to the method handle into the specified register."
  long_desc: "Moves a reference to the method handle specified by method_handle@BBBB into vAA."
  note: "Present in Dex files from version `039` onwards."
  example: ""
  example_desc: ""

- opcode: "FF"
  name: "const-method-type"
  format: "AA|op BBBB"
  format_id: "21c"
  syntax: "const-method-type vAA, proto@BBBB"
  args_info: "A: destination register (8 bits), B: method prototype reference (16 bits)"
  short_desc: "Move a reference to the method prototype into the specified register."
  long_desc: "Moves a reference to the method prototype specified by proto@BBBB into vAA."
  note: "Present in Dex files from version `039` onwards."
  example: ""
  example_desc: ""
